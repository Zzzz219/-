import numpy as np
import pandas as pd
import statsmodels
import statsmodels.api as sm
from matplotlib.ticker import FuncFormatter
from statsmodels.tsa.stattools import coint, adfuller
import os
import matplotlib.pyplot as plt
import seaborn as sns;

sns.set(style="whitegrid")
import seaborn


def lines(S1, S2):
    S1 = sm.add_constant(S1)
    results = sm.OLS(S2, S1).fit()

    S1 = S1[S1._name]
    b = results.params[S1._name]
    spread = S2 - b * S1

    plt.plot(spread)
    plt.axhline(spread.mean(), color='black')
    plt.legend(['Spread'])
    plt.show()

    ratio = S1 / S2
    plt.plot(ratio)
    plt.axhline(ratio.mean(), color='black')
    plt.legend(['Price Ratio'])
    plt.show()

    def zscore(series):
        return (series - series.mean()) / np.std(series)

    zscore(ratio).plot(figsize=(12, 6))
    plt.axhline(zscore(ratio).mean())
    plt.axhline(1.0, color='red')
    plt.axhline(-1.0, color='green')
    plt.show()


def trade(S1, S2):
    train = S1 / S2

    ratios_mavg5 = train.rolling(window=5, center=False).mean()
    ratios_mavg60 = train.rolling(window=60, center=False).mean()
    std_60 = train.rolling(window=60, center=False).std()
    zscore_60_5 = (ratios_mavg5 - ratios_mavg60) / std_60

    plt.figure(figsize=(12, 6))
    zscore_60_5.plot()
    plt.axhline(0, color='black')
    plt.axhline(1.0, color='red', linestyle='--')
    plt.axhline(-1.0, color='green', linestyle='--')
    plt.legend(['Rolling Ratio z-Score', 'Mean', 'short spread', 'long spread'])
    plt.show()

    plt.figure(figsize=(12, 7))

    train.plot()
    buy = train.copy()
    sell = train.copy()
    buy[zscore_60_5 > -1] = 0
    sell[zscore_60_5 < 1] = 0
    S1.plot(color='b')
    S2.plot(color='c')
    buyR = 0 * S1.copy()
    sellR = 0 * S1.copy()

    # When you buy the ratio, you buy stock S1 and sell S2
    buyR[buy != 0] = S1[buy != 0]
    sellR[buy != 0] = S2[buy != 0]

    # When you sell the ratio, you sell stock S1 and buy S2
    buyR[sell != 0] = S2[sell != 0]
    sellR[sell != 0] = S1[sell != 0]


    buyR.plot(color='g', linestyle='None', marker='^')
    sellR.plot(color='r', linestyle='None', marker='^')
    x1, x2, y1, y2 = plt.axis()
    plt.axis((x1, x2, min(S1.min(), S2.min()), max(S1.max(), S2.max())))
    plt.legend([S1._name, S2._name, 'Buy Signal', 'Sell Signal'])
    plt.show()


def plot_trade(S1, S2):
    train = S1 / S2

    ratios_mavg5 = train.rolling(window=5, center=False).mean()
    ratios_mavg60 = train.rolling(window=60, center=False).mean()
    std_60 = train.rolling(window=60, center=False).std()
    zscore_60_5 = (ratios_mavg5 - ratios_mavg60) / std_60

    plt.figure(figsize=(12, 6))
    zscore_60_5.plot()
    plt.axhline(0, color='black')
    plt.axhline(1.0, color='red', linestyle='--')
    plt.axhline(-1.0, color='green', linestyle='--')
    plt.legend(['Rolling Ratio z-Score', 'Mean', 'short spread', 'long spread'])
    plt.show()

    plt.figure(figsize=(12, 7))

    train.plot()
    buy = train.copy()
    sell = train.copy()
    buy[zscore_60_5 > -1] = 0
    sell[zscore_60_5 < 1] = 0

    long = []
    short = []
    for i in range(len(S1)):
        if buy[i] != 0:
            long.append(i)
    for i in range(len(S1)):
        if sell[i] != 0:
            short.append(i)

    fig = plt.figure(figsize=(12, 10), dpi=80)

    ax1 = fig.add_subplot(111)
    ax1.plot(S1, color='b')
    ax1.scatter(long, [S1[i] for i in long], color='g', marker='^')
    ax1.scatter(short, [S1[i] for i in short], color='r', marker='^')
    plt.legend([S1._name, 'Buy Signal', 'Sell Signal'], loc=0)

    ax2 = ax1.twinx()
    ax2.plot(S2, color='c')

    ax2.scatter(long, [S2[i] for i in long], color='r', marker='^')
    ax2.scatter(short, [S2[i] for i in short], color='g', marker='^')
    plt.legend([S2._name, 'Sell Signal', 'Buy Signal'], loc=3)
    plt.show()

    #position, cost
    p1 = [0,0]
    p2 = [0,0]
    profit = [0]
    unit = 10
    def MaxDrawdown(return_list):
        m = []
        for j in range(len(return_list)):
            maxd = 0
            for i in return_list[j:]:
               maxd = max(maxd, return_list[j]-i)
            m.append(maxd)
        return max(m)

    for i in range(len(S1)):
        profit.append((p1[0]*S1[i] + p2[0]*S2[i])/1000)
        if sell[i] != 0:
            p1[1] = (p1[1]*p1[0]+S1[i]*unit/S1[i])/ (unit/S1[i]+p1[0])
            p1[0] += unit/S1[i]
            p2[1] = (p2[1]*p2[0]-S2[i]*unit/S2[i])/ (unit/S2[i]+p2[0])
            p2[0] -= unit/S2[i]
        elif buy[i] != 0:
            p2[1] = (p2[1]*p2[0]+S2[i]*unit/S2[i])/ (unit/S2[i]+p2[0])
            p2[0] += 3/S2[i]
            p1[1] = (p1[1]*p1[0]-S1[i]*unit/S1[i])/ (unit/S1[i]+p1[0])
            p1[0] -= unit/S1[i]
    def to_percent(temp, position):
        return '%1.0f' % (100 * temp) + '%'
    plt.gca().yaxis.set_major_formatter(FuncFormatter(to_percent))
    plt.plot(profit)
    plt.title('Profit Ratio')
    plt.show()
    print('Max Drawn', MaxDrawdown(profit))
    print('Return', profit[-1])

selected = [('BTCUSDT', 'LTCUSDT'), ('BTCUSDT', 'XMRUSDT'), ('BTCUSDT', 'ZECUSDT'), ('LTCUSDT', 'NEOUSDT'),
            ('XMRUSDT', 'NEOUSDT')]

crypto_list = ['BTCUSDT', 'ETHUSDT', 'LTCUSDT', 'XMRUSDT', 'NEOUSDT', 'XRPUSDT', 'ZECUSDT']

data = pd.DataFrame(columns=crypto_list)

for name in crypto_list:
    print('Reading %s...' % name)
    df = pd.read_csv('CryptoInfo/%s.csv' % name)
    data[name] = df['Close']

# lines(data[selected[0][0]], data[selected[0][1]])
plot_trade(data[selected[4][0]], data[selected[4][1]])
